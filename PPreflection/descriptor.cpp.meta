#pragma once
#include "PPreflection/reflect.hpp"

namespace PPreflection::tags
{
	struct global
	{
		struct std
		{
			struct __cxx11
			{
			};
		};
		struct __gnu_cxx
		{
			struct __cxx11
			{
				struct __exception_ptr
				{
				};
				struct __swappable_details
				{
				};
				struct __swappable_with_details
				{
				};
			};
		};
		struct PPreflection
		{
			struct detail
			{
			};
			struct tags
			{
			};
		};
		struct __cxxabiv1
		{
		};
	};
}

// ::
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::namespaces<PPreflection::tags::global>> = PP::type_tuple<
	PPreflection::tags::global::std,
	PPreflection::tags::global::__gnu_cxx,
	PPreflection::tags::global::PPreflection,
	PPreflection::tags::global::__cxxabiv1>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::types<PPreflection::tags::global>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::functions<PPreflection::tags::global>> = PP::value_tuple<>;

// ::std
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::global::std> = PPreflection::detail::basic_namespace<PPreflection::tags::global::std>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PPreflection::tags::global::std>> = "std"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PPreflection::tags::global::std>> = PP::type<PPreflection::tags::global>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::namespaces<PPreflection::tags::global::std>> = PP::type_tuple<
	PPreflection::tags::global::PPreflection::tags::__cxx11::__cxx11>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::types<PPreflection::tags::global::std>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::functions<PPreflection::tags::global::std>> = PP::value_tuple<>;

// __cxx11::__cxx11
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::global::PPreflection::tags::__cxx11::__cxx11> = PPreflection::detail::basic_namespace<PPreflection::tags::global::PPreflection::tags::__cxx11::__cxx11>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PPreflection::tags::global::PPreflection::tags::__cxx11::__cxx11>> = "__cxx11"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PPreflection::tags::global::PPreflection::tags::__cxx11::__cxx11>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::namespaces<PPreflection::tags::global::PPreflection::tags::__cxx11::__cxx11>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::types<PPreflection::tags::global::PPreflection::tags::__cxx11::__cxx11>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::functions<PPreflection::tags::global::PPreflection::tags::__cxx11::__cxx11>> = PP::value_tuple<>;

// ::__gnu_cxx
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::global::__gnu_cxx> = PPreflection::detail::basic_namespace<PPreflection::tags::global::__gnu_cxx>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PPreflection::tags::global::__gnu_cxx>> = "__gnu_cxx"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PPreflection::tags::global::__gnu_cxx>> = PP::type<PPreflection::tags::global>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::namespaces<PPreflection::tags::global::__gnu_cxx>> = PP::type_tuple<
	PPreflection::tags::global::PPreflection::tags::__cxx11>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::types<PPreflection::tags::global::__gnu_cxx>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::functions<PPreflection::tags::global::__gnu_cxx>> = PP::value_tuple<>;

// tags::__cxx11
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::global::PPreflection::tags::__cxx11> = PPreflection::detail::basic_namespace<PPreflection::tags::global::PPreflection::tags::__cxx11>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PPreflection::tags::global::PPreflection::tags::__cxx11>> = "__cxx11"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PPreflection::tags::global::PPreflection::tags::__cxx11>> = PP::type<PPreflection::tags::global::PPreflection::tags>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::namespaces<PPreflection::tags::global::PPreflection::tags::__cxx11>> = PP::type_tuple<
	PPreflection::tags::global::PPreflection::tags::__cxx11::__exception_ptr,
	PPreflection::tags::global::PPreflection::tags::__cxx11::__swappable_details,
	PPreflection::tags::global::PPreflection::tags::__cxx11::__swappable_with_details>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::types<PPreflection::tags::global::PPreflection::tags::__cxx11>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::functions<PPreflection::tags::global::PPreflection::tags::__cxx11>> = PP::value_tuple<
	PPreflection::overload_caster<wchar_t *, wchar_t>(::std::wcschr),
	PPreflection::overload_caster<wchar_t *, const wchar_t *>(::std::wcspbrk),
	PPreflection::overload_caster<wchar_t *, wchar_t>(::std::wcsrchr),
	PPreflection::overload_caster<wchar_t *, const wchar_t *>(::std::wcsstr),
	PPreflection::overload_caster<wchar_t *, wchar_t, std::size_t>(::std::wmemchr),
	PPreflection::overload_caster<std::terminate_handler>(::std::set_terminate),
	PPreflection::overload_caster<>(::std::get_terminate),
	PPreflection::overload_caster<>(::std::terminate),
	PPreflection::overload_caster<std::unexpected_handler>(::std::set_unexpected),
	PPreflection::overload_caster<>(::std::get_unexpected),
	PPreflection::overload_caster<>(::std::unexpected),
	PPreflection::overload_caster<>(::std::uncaught_exception),
	PPreflection::overload_caster<>(::std::uncaught_exceptions),
	PPreflection::overload_caster<const void *, std::size_t, std::size_t>(::std::_Hash_bytes),
	PPreflection::overload_caster<const void *, std::size_t, std::size_t>(::std::_Fnv_hash_bytes),
	PPreflection::overload_caster<>(::std::current_exception),
	PPreflection::overload_caster<class std::__exception_ptr::exception_ptr>(::std::rethrow_exception),
	PPreflection::overload_caster<const void *>(::std::__rethrow_if_nested_impl),
	PPreflection::overload_caster<std::new_handler>(::std::set_new_handler),
	PPreflection::overload_caster<>(::std::get_new_handler)>;

// ::std::wcschr(wchar_t *, wchar_t)
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<wchar_t *, wchar_t>(::std::wcschr)>> = detail::basic_namespace_function<PPreflection::overload_caster<wchar_t *, wchar_t>(::std::wcschr)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<wchar_t *, wchar_t>(::std::wcschr)>>> = "wcschr"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<wchar_t *, wchar_t>(::std::wcschr)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::wcspbrk(wchar_t *, const wchar_t *)
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<wchar_t *, const wchar_t *>(::std::wcspbrk)>> = detail::basic_namespace_function<PPreflection::overload_caster<wchar_t *, const wchar_t *>(::std::wcspbrk)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<wchar_t *, const wchar_t *>(::std::wcspbrk)>>> = "wcspbrk"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<wchar_t *, const wchar_t *>(::std::wcspbrk)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::wcsrchr(wchar_t *, wchar_t)
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<wchar_t *, wchar_t>(::std::wcsrchr)>> = detail::basic_namespace_function<PPreflection::overload_caster<wchar_t *, wchar_t>(::std::wcsrchr)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<wchar_t *, wchar_t>(::std::wcsrchr)>>> = "wcsrchr"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<wchar_t *, wchar_t>(::std::wcsrchr)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::wcsstr(wchar_t *, const wchar_t *)
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<wchar_t *, const wchar_t *>(::std::wcsstr)>> = detail::basic_namespace_function<PPreflection::overload_caster<wchar_t *, const wchar_t *>(::std::wcsstr)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<wchar_t *, const wchar_t *>(::std::wcsstr)>>> = "wcsstr"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<wchar_t *, const wchar_t *>(::std::wcsstr)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::wmemchr(wchar_t *, wchar_t, std::size_t)
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<wchar_t *, wchar_t, std::size_t>(::std::wmemchr)>> = detail::basic_namespace_function<PPreflection::overload_caster<wchar_t *, wchar_t, std::size_t>(::std::wmemchr)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<wchar_t *, wchar_t, std::size_t>(::std::wmemchr)>>> = "wmemchr"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<wchar_t *, wchar_t, std::size_t>(::std::wmemchr)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::set_terminate(std::terminate_handler)
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<std::terminate_handler>(::std::set_terminate)>> = detail::basic_namespace_function<PPreflection::overload_caster<std::terminate_handler>(::std::set_terminate)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<std::terminate_handler>(::std::set_terminate)>>> = "set_terminate"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<std::terminate_handler>(::std::set_terminate)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::get_terminate()
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<>(::std::get_terminate)>> = detail::basic_namespace_function<PPreflection::overload_caster<>(::std::get_terminate)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<>(::std::get_terminate)>>> = "get_terminate"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<>(::std::get_terminate)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::terminate()
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<>(::std::terminate)>> = detail::basic_namespace_function<PPreflection::overload_caster<>(::std::terminate)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<>(::std::terminate)>>> = "terminate"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<>(::std::terminate)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::set_unexpected(std::unexpected_handler)
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<std::unexpected_handler>(::std::set_unexpected)>> = detail::basic_namespace_function<PPreflection::overload_caster<std::unexpected_handler>(::std::set_unexpected)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<std::unexpected_handler>(::std::set_unexpected)>>> = "set_unexpected"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<std::unexpected_handler>(::std::set_unexpected)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::get_unexpected()
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<>(::std::get_unexpected)>> = detail::basic_namespace_function<PPreflection::overload_caster<>(::std::get_unexpected)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<>(::std::get_unexpected)>>> = "get_unexpected"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<>(::std::get_unexpected)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::unexpected()
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<>(::std::unexpected)>> = detail::basic_namespace_function<PPreflection::overload_caster<>(::std::unexpected)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<>(::std::unexpected)>>> = "unexpected"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<>(::std::unexpected)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::uncaught_exception()
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<>(::std::uncaught_exception)>> = detail::basic_namespace_function<PPreflection::overload_caster<>(::std::uncaught_exception)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<>(::std::uncaught_exception)>>> = "uncaught_exception"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<>(::std::uncaught_exception)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx11>;

// ::std::uncaught_exceptions()
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<>(::std::uncaught_exceptions)>> = detail::basic_namespace_function<PPreflection::overload_caster<>(::std::uncaught_exceptions)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<>(::std::uncaught_exceptions)>>> = "uncaught_exceptions"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<>(::std::uncaught_exceptions)>>> = PP::type<PPreflection::tags::global::PPreflection::tags::__cxx1