#ifndef PPREFLECTOR_GUARD

#pragma once
#include "PPreflection/meta.hpp"

namespace PPreflection::tags
{
	struct global
	{
		struct visitors;
		struct animals;
		struct reactions;
	};
}

// ::visitors::animal_visitor
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<::visitors::animal_visitor>> = "animal_visitor"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<::visitors::animal_visitor>> = PP::type<PPreflection::tags::global::visitors>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::nested_types<::visitors::animal_visitor>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::base_classes<::visitors::animal_visitor>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::constructors<::visitors::animal_visitor>> = PP::make_tuple();
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::static_member_functions<::visitors::animal_visitor>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::non_conversion_member_functions<::visitors::animal_visitor>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::conversion_functions<::visitors::animal_visitor>> = PP::value_tuple<>;

// ::visitors::visitor_reflection::react_to(const animals::animal &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, const animals::animal &>(&::visitors::visitor_reflection::react_to)>>> = "react_to"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, const animals::animal &>(&::visitors::visitor_reflection::react_to)>>> = PP::type<::visitors::visitor_reflection>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, const animals::animal &>(&::visitors::visitor_reflection::react_to)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, const animals::animal &>(&::visitors::visitor_reflection::react_to)>{};

// ::visitors::visitor_reflection
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<::visitors::visitor_reflection>> = "visitor_reflection"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<::visitors::visitor_reflection>> = PP::type<PPreflection::tags::global::visitors>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::nested_types<::visitors::visitor_reflection>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::base_classes<::visitors::visitor_reflection>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::constructors<::visitors::visitor_reflection>> = PP::make_tuple();
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::static_member_functions<::visitors::visitor_reflection>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::non_conversion_member_functions<::visitors::visitor_reflection>> = PP::value_tuple<
	PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, const animals::animal &>(&::visitors::visitor_reflection::react_to)>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::conversion_functions<::visitors::visitor_reflection>> = PP::value_tuple<>;

// ::visitors
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PPreflection::tags::global::visitors>> = "visitors"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PPreflection::tags::global::visitors>> = PP::type<PPreflection::tags::global>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::functions<PPreflection::tags::global::visitors>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::types<PPreflection::tags::global::visitors>> = PP::type_tuple<
	::visitors::animal_visitor,
	::visitors::visitor_reflection>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::namespaces<PPreflection::tags::global::visitors>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::global::visitors> = PPreflection::detail::basic_namespace<PPreflection::tags::global::visitors>{};

// ::animals::animal::name() const
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::animal::name)>>> = "name"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::animal::name)>>> = PP::type<::animals::animal>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::animal::name)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::animal::name)>{};

// ::animals::animal::accept(visitors::animal_visitor &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::animal::accept)>>> = "accept"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::animal::accept)>>> = PP::type<::animals::animal>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::animal::accept)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::animal::accept)>{};

// ::animals::animal
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<::animals::animal>> = "animal"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<::animals::animal>> = PP::type<PPreflection::tags::global::animals>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::nested_types<::animals::animal>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::base_classes<::animals::animal>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::constructors<::animals::animal>> = PP::make_tuple();
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::static_member_functions<::animals::animal>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::non_conversion_member_functions<::animals::animal>> = PP::value_tuple<
	PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::animal::name),
	PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::animal::accept)>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::conversion_functions<::animals::animal>> = PP::value_tuple<>;

// ::animals::ape::name() const
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::ape::name)>>> = "name"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::ape::name)>>> = PP::type<::animals::ape>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::ape::name)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::ape::name)>{};

// ::animals::ape::accept(visitors::animal_visitor &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::ape::accept)>>> = "accept"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::ape::accept)>>> = PP::type<::animals::ape>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::ape::accept)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::ape::accept)>{};

// ::animals::ape
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<::animals::ape>> = "ape"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<::animals::ape>> = PP::type<PPreflection::tags::global::animals>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::nested_types<::animals::ape>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::base_classes<::animals::ape>> = PP::type_tuple<
	::animals::animal>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::constructors<::animals::ape>> = PP::make_tuple();
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::static_member_functions<::animals::ape>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::non_conversion_member_functions<::animals::ape>> = PP::value_tuple<
	PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::ape::name),
	PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::ape::accept)>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::conversion_functions<::animals::ape>> = PP::value_tuple<>;

// ::animals::bat::name() const
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::bat::name)>>> = "name"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::bat::name)>>> = PP::type<::animals::bat>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::bat::name)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::bat::name)>{};

// ::animals::bat::accept(visitors::animal_visitor &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::bat::accept)>>> = "accept"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::bat::accept)>>> = PP::type<::animals::bat>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::bat::accept)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::bat::accept)>{};

// ::animals::bat
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<::animals::bat>> = "bat"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<::animals::bat>> = PP::type<PPreflection::tags::global::animals>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::nested_types<::animals::bat>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::base_classes<::animals::bat>> = PP::type_tuple<
	::animals::animal>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::constructors<::animals::bat>> = PP::make_tuple();
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::static_member_functions<::animals::bat>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::non_conversion_member_functions<::animals::bat>> = PP::value_tuple<
	PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::bat::name),
	PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::bat::accept)>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::conversion_functions<::animals::bat>> = PP::value_tuple<>;

// ::animals::cat::name() const
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::cat::name)>>> = "name"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::cat::name)>>> = PP::type<::animals::cat>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::cat::name)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::cat::name)>{};

// ::animals::cat::accept(visitors::animal_visitor &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::cat::accept)>>> = "accept"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::cat::accept)>>> = PP::type<::animals::cat>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::cat::accept)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::cat::accept)>{};

// ::animals::cat
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<::animals::cat>> = "cat"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<::animals::cat>> = PP::type<PPreflection::tags::global::animals>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::nested_types<::animals::cat>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::base_classes<::animals::cat>> = PP::type_tuple<
	::animals::animal>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::constructors<::animals::cat>> = PP::make_tuple();
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::static_member_functions<::animals::cat>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::non_conversion_member_functions<::animals::cat>> = PP::value_tuple<
	PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::cat::name),
	PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::cat::accept)>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::conversion_functions<::animals::cat>> = PP::value_tuple<>;

// ::animals::dog::name() const
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::dog::name)>>> = "name"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::dog::name)>>> = PP::type<::animals::dog>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::dog::name)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::dog::name)>{};

// ::animals::dog::accept(visitors::animal_visitor &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::dog::accept)>>> = "accept"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::dog::accept)>>> = PP::type<::animals::dog>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::dog::accept)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::dog::accept)>{};

// ::animals::dog
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<::animals::dog>> = "dog"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<::animals::dog>> = PP::type<PPreflection::tags::global::animals>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::nested_types<::animals::dog>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::base_classes<::animals::dog>> = PP::type_tuple<
	::animals::animal>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::constructors<::animals::dog>> = PP::make_tuple();
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::static_member_functions<::animals::dog>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::non_conversion_member_functions<::animals::dog>> = PP::value_tuple<
	PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::dog::name),
	PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::dog::accept)>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::conversion_functions<::animals::dog>> = PP::value_tuple<>;

// ::animals::elk::name() const
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::elk::name)>>> = "name"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::elk::name)>>> = PP::type<::animals::elk>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::elk::name)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::elk::name)>{};

// ::animals::elk::accept(visitors::animal_visitor &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::elk::accept)>>> = "accept"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::elk::accept)>>> = PP::type<::animals::elk>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::elk::accept)>> = PPreflection::detail::basic_non_conversion_member_function<PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::elk::accept)>{};

// ::animals::elk
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<::animals::elk>> = "elk"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<::animals::elk>> = PP::type<PPreflection::tags::global::animals>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::nested_types<::animals::elk>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::base_classes<::animals::elk>> = PP::type_tuple<
	::animals::animal>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::constructors<::animals::elk>> = PP::make_tuple();
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::static_member_functions<::animals::elk>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::non_conversion_member_functions<::animals::elk>> = PP::value_tuple<
	PPreflection::overload_member_caster<PP::cv_qualifier::Const, PP::ref_qualifier::none>(&::animals::elk::name),
	PPreflection::overload_member_caster<PP::cv_qualifier::none, PP::ref_qualifier::none, visitors::animal_visitor &>(&::animals::elk::accept)>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::conversion_functions<::animals::elk>> = PP::value_tuple<>;

// ::animals
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PPreflection::tags::global::animals>> = "animals"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PPreflection::tags::global::animals>> = PP::type<PPreflection::tags::global>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::functions<PPreflection::tags::global::animals>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::types<PPreflection::tags::global::animals>> = PP::type_tuple<
	::animals::animal,
	::animals::ape,
	::animals::bat,
	::animals::cat,
	::animals::dog,
	::animals::elk>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::namespaces<PPreflection::tags::global::animals>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::global::animals> = PPreflection::detail::basic_namespace<PPreflection::tags::global::animals>{};

// ::reactions::react_to(const animals::ape &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<const animals::ape &>(::reactions::react_to)>>> = "react_to"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<const animals::ape &>(::reactions::react_to)>>> = PP::type<PPreflection::tags::global::reactions>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<const animals::ape &>(::reactions::react_to)>> = PPreflection::detail::basic_namespace_function<PPreflection::overload_caster<const animals::ape &>(::reactions::react_to)>{};

// ::reactions::react_to(const animals::bat &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<const animals::bat &>(::reactions::react_to)>>> = "react_to"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<const animals::bat &>(::reactions::react_to)>>> = PP::type<PPreflection::tags::global::reactions>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<const animals::bat &>(::reactions::react_to)>> = PPreflection::detail::basic_namespace_function<PPreflection::overload_caster<const animals::bat &>(::reactions::react_to)>{};

// ::reactions::react_to(const animals::cat &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<const animals::cat &>(::reactions::react_to)>>> = "react_to"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<const animals::cat &>(::reactions::react_to)>>> = PP::type<PPreflection::tags::global::reactions>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<const animals::cat &>(::reactions::react_to)>> = PPreflection::detail::basic_namespace_function<PPreflection::overload_caster<const animals::cat &>(::reactions::react_to)>{};

// ::reactions::react_to(const animals::dog &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<const animals::dog &>(::reactions::react_to)>>> = "react_to"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<const animals::dog &>(::reactions::react_to)>>> = PP::type<PPreflection::tags::global::reactions>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<const animals::dog &>(::reactions::react_to)>> = PPreflection::detail::basic_namespace_function<PPreflection::overload_caster<const animals::dog &>(::reactions::react_to)>{};

// ::reactions::react_to(const animals::elk &)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<const animals::elk &>(::reactions::react_to)>>> = "react_to"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<const animals::elk &>(::reactions::react_to)>>> = PP::type<PPreflection::tags::global::reactions>;
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<const animals::elk &>(::reactions::react_to)>> = PPreflection::detail::basic_namespace_function<PPreflection::overload_caster<const animals::elk &>(::reactions::react_to)>{};

// ::reactions
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PPreflection::tags::global::reactions>> = "reactions"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PPreflection::tags::global::reactions>> = PP::type<PPreflection::tags::global>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::functions<PPreflection::tags::global::reactions>> = PP::value_tuple<
	PPreflection::overload_caster<const animals::ape &>(::reactions::react_to),
	PPreflection::overload_caster<const animals::bat &>(::reactions::react_to),
	PPreflection::overload_caster<const animals::cat &>(::reactions::react_to),
	PPreflection::overload_caster<const animals::dog &>(::reactions::react_to),
	PPreflection::overload_caster<const animals::elk &>(::reactions::react_to)>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::types<PPreflection::tags::global::reactions>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::namespaces<PPreflection::tags::global::reactions>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::global::reactions> = PPreflection::detail::basic_namespace<PPreflection::tags::global::reactions>{};

// ::
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::functions<PPreflection::tags::global>> = PP::value_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::types<PPreflection::tags::global>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::namespaces<PPreflection::tags::global>> = PP::type_tuple<
	PPreflection::tags::global::visitors,
	PPreflection::tags::global::animals,
	PPreflection::tags::global::reactions>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::global> = PPreflection::detail::basic_namespace<PPreflection::tags::global>{};

namespace PPreflection
{
	constexpr inline const Namespace& global_namespace = reflect(PP::type<tags::global>);
}

const PPreflection::non_union_class_type& PPreflection::reflect_polymorphic(std::type_index type)
{
	static const auto map = type_info_map(PP::type_tuple<
		::visitors::animal_visitor,
		::animals::animal,
		::animals::ape,
		::animals::bat,
		::animals::cat,
		::animals::dog,
		::animals::elk,
		::visitors::visitor_reflection>);

	return map.get(type);
}

#endif
