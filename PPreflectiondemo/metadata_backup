namespace PPreflection::tags
{
	struct global
	{

	};
}

// ::
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::types<PPreflection::tags::global>> = PP::type_tuple<
	::S,
	::E
>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::namespaces<PPreflection::tags::global>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::functions<PPreflection::tags::global>> = PP::value_tuple<
	PPreflection::overload_caster<int>(::f),
	PPreflection::overload_caster<int, int>(::f)
>;

// ::E
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<::E>> = "E"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<::E>> = PP::type<PPreflection::tags::global>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::enum_values<::E>> = PP::value_tuple<
	E::val,
	E::cigi
>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<::E::val>>> = "val"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<::E::cigi>>> = "cigi"_sv;

// ::S
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<::S>> = "S"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<::S>> = PP::type<PPreflection::tags::global>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::nested_classes<::S>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::base_classes<::S>> = PP::type_tuple<>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::constructors<::S>> = PP::make_tuple(
	PP::type_tuple<>,
	PP::type_tuple<int>
);
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::static_member_functions<::S>> = PP::type_tuple<
	PPreflection::tags::global::S::g
>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::member_functions<::S>> = PP::value_tuple<
	&::S::f,
	&::S::operator int
>;

// ::S::S()
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::constructor<::S>> = PPreflection::detail::basic_constructor<::S>{};
// ::S::S(int)
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::is_explicit<::S, int>> = PP::value_true;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::constructor<::S, int>> = PPreflection::detail::basic_constructor<::S, int>{};

// ::S::g(int)
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<::S::g>> = detail::basic_static_member_function<::S::g>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<::S::g>>> = "g"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::overloads<PP::value_t<::S::g>>> = PP::type<PPreflection::tags::global::S>;

// ::S::f(int) const
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<&::S::f>> = detail::basic_non_conversion_member_function<&::S::f>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<&::S::f>> = "f"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<&::S::f>> = PP::type<::S>;

// ::S::operator int() const
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<&::S::operator int>> = detail::basic_conversion_function<&::S::operator int>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<&::S::operator int>> = PP::type<::S>;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::is_explicit<PP::value_t<&::S::operator int>>> = false;

// ::f(int)
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<int>(::f)>> = detail::basic_namespace_function<PPreflection::overload_caster<int>(::f)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<int>(::f)>>> = "f"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<int>(::f)>>> = PP::type<PPreflection::tags::global>;
// ::f(int, int)
template <> constexpr inline auto PPreflection::detail::metadata<PP::value_t<PPreflection::overload_caster<int, int>(::f)>> = detail::basic_namespace_function<PPreflection::overload_caster<int, int>(::f)>{};
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::name<PP::value_t<PPreflection::overload_caster<int, int>(::f)>>> = "f"_sv;
template <> constexpr inline auto PPreflection::detail::metadata<PPreflection::tags::parent<PP::value_t<PPreflection::overload_caster<int, int>(::f)>>> = PP::type<PPreflection::tags::global>;
